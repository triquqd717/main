// data/game_data_loader.js
require("../utils/logger");
const fetch = require("node-fetch");

class GameDataLoader {
  constructor() {
    this.gameData = {
      SEED_ITEMS: [],
      GEAR_ITEMS: [],
      EGG_ITEMS: [],
      COSMETIC_ITEMS: [],
      WEATHER_TYPES: [],
      GNOME_MERCHANT_ITEMS: [],
      SKY_MERCHANT_ITEMS: [],
      HONEY_MERCHANT_ITEMS: [],
      SUMMER_SEED_MERCHANT_ITEMS: [],
      SEED_EMOJIS: {},
      GEAR_EMOJIS: {},
      EGG_EMOJIS: {},
      WEATHER_EMOJIS: {},
      COSMETIC_EMOJIS: {},
      COSMETIC_CATEGORIES: {},
      Advert: null,
    };
  }

  async refreshGameData() {
    const url =
      "https://raw.githubusercontent.com/triquqd717/main/refs/heads/main/tables/GrowGardenDT.json";
    try {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      const jsonData = await response.json();
      this.gameData.SEED_ITEMS = jsonData.SEED_ITEMS || [];
      this.gameData.GEAR_ITEMS = jsonData.GEAR_ITEMS || [];
      this.gameData.EGG_ITEMS = jsonData.EGG_ITEMS || [];
      this.gameData.COSMETIC_ITEMS = jsonData.COSMETIC_ITEMS || [];
      this.gameData.WEATHER_TYPES = jsonData.WEATHER_TYPES || [];
      this.gameData.COSMETIC_CATEGORIES = jsonData.COSMETIC_CATEGORIES || {};
      this.gameData.WEATHER_EMOJIS = jsonData.WeatherEmojis || {};
      this.gameData.SEED_EMOJIS = jsonData.SeedEmojis || {};
      this.gameData.GEAR_EMOJIS = jsonData.GearEmojis || {};
      this.gameData.EGG_EMOJIS = jsonData.EggEmojis || {};
      this.gameData.COSMETIC_EMOJIS = jsonData.CosmeticEmojis || {};
      this.gameData.Advert = jsonData.Advert || null;
      this.gameData.GNOME_MERCHANT_ITEMS = jsonData.GNOME_MERCHANT_ITEMS || [];
      this.gameData.SKY_MERCHANT_ITEMS = jsonData.SKY_MERCHANT_ITEMS || [];
      this.gameData.HONEY_MERCHANT_ITEMS = jsonData.HONEY_MERCHANT_ITEMS || [];
      this.gameData.SUMMER_SEED_MERCHANT_ITEMS =
        jsonData.SUMMER_SEED_MERCHANT_ITEMS || [];

      console.log(
        "[GameDataLoader] Successfully refreshed game data from GitHub."
      );
      return true;
    } catch (error) {
      console.error(
        `[GameDataLoader] Failed to refresh game data: ${error.message}`
      );
      console.warn("[GameDataLoader] Using previous game data as a fallback.");
      return false;
    }
  }

  setGameData(newData) {
    if (!newData) return;
    const dataToAssign = newData.gameData ? newData.gameData : newData;
    Object.assign(this.gameData, dataToAssign);
    console.log("[GameDataLoader] Game data has been set from another shard.");
  }
}

module.exports = new GameDataLoader();
